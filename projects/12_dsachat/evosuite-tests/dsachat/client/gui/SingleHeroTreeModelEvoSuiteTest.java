/*
 * This file was automatically generated by EvoSuite
 */

package dsachat.client.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dsachat.client.gui.SingleHeroTreeModel;
import dsachat.share.hero.FightValue;
import dsachat.share.hero.Hero;
import javax.swing.event.TreeModelListener;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.tree.TreePath;
import org.dom4j.Document;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SingleHeroTreeModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel((Hero) null);
      singleHeroTreeModel0.valueForPathChanged((TreePath) null, (Object) singleHeroTreeModel0);
  }

  @Test
  public void test1()  throws Throwable  {
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel((Hero) null);
      // Undeclared exception!
      try {
        singleHeroTreeModel0.getRoot();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel((Hero) null);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.TreeModelHandler basicTreeUI_TreeModelHandler0 = metalTreeUI0.new TreeModelHandler();
      singleHeroTreeModel0.addTreeModelListener((TreeModelListener) basicTreeUI_TreeModelHandler0);
      singleHeroTreeModel0.fireTreeStructureChanged((Hero) null);
  }

  @Test
  public void test3()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("|");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.TreeModelHandler basicTreeUI_TreeModelHandler0 = metalTreeUI0.new TreeModelHandler();
      singleHeroTreeModel0.removeTreeModelListener((TreeModelListener) basicTreeUI_TreeModelHandler0);
  }

  @Test
  public void test4()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("&quot;");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      Object object0 = singleHeroTreeModel0.getChild((Object) dOMElement0, 40);
      assertNull(object0);
  }

  @Test
  public void test5()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("&quot;");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      Object object0 = singleHeroTreeModel0.getChild((Object) "Name", 40);
      assertNull(object0);
  }

  @Test
  public void test6()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement((QName) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      int int0 = singleHeroTreeModel0.getChildCount((Object) singleHeroTreeModel0);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement((QName) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      int int0 = singleHeroTreeModel0.getChildCount((Object) "Name");
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("|");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      int int0 = singleHeroTreeModel0.getIndexOfChild((Object) "Dialog", (Object) "Dialog");
      assertEquals((-1), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("&quot;");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      boolean boolean0 = singleHeroTreeModel0.isLeaf((Object) "Attributes");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("|");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      boolean boolean0 = singleHeroTreeModel0.isLeaf((Object) "Dialog");
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement((QName) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI", "HBWF0H7@LW+UkHaI");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel(hero0);
      FightValue fightValue0 = new FightValue("HBWF0H7@LW+UkHaI", 0, 31);
      boolean boolean0 = singleHeroTreeModel0.isLeaf((Object) fightValue0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SingleHeroTreeModel singleHeroTreeModel0 = new SingleHeroTreeModel((Hero) null);
      singleHeroTreeModel0.fireTreeStructureChanged((Hero) null);
  }
}
