/*
 * This file was automatically generated by EvoSuite
 */

package dsachat.share.hero;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dsachat.share.hero.Attribute;
import dsachat.share.hero.FightValue;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Special;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import java.util.Vector;
import org.dom4j.Branch;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HeroEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.attack("", (-1));
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test1()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      Vector<Special> vector0 = hero0.getSpecials();
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrLEP());
      assertNotNull(vector0);
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
  }

  @Test
  public void test2()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getCurrAUP();
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
      assertEquals((-1), int0);
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
  }

  @Test
  public void test3()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      boolean boolean0 = hero0.isPriest();
      assertEquals(false, boolean0);
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test4()  throws Throwable  {
      Namespace namespace0 = Namespace.get("\u00DF");
      DOMElement dOMElement0 = new DOMElement("\u00DF", namespace0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      Weapon weapon0 = Weapon.STEINMESSER;
      hero0.setSelectedWeapon(weapon0);
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrKAP());
  }

  @Test
  public void test5()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.setCurrINI(9);
      assertEquals(9, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
  }

  @Test
  public void test6()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getCurrINI();
      assertEquals(0, int0);
      assertEquals(false, hero0.isPriest());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test7()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      boolean boolean0 = hero0.isMagican();
      assertEquals(false, boolean0);
      assertEquals(false, hero0.isPriest());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(0, hero0.getCurrINI());
  }

  @Test
  public void test8()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getCurrKAP();
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals((-1), int0);
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test9()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getINI();
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
      assertEquals(0, int0);
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test10()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      Vector<Talent> vector0 = hero0.getTalents();
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
      assertNotNull(vector0);
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
      assertEquals(-1, hero0.getCurrAUP());
  }

  @Test
  public void test11()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.getName();
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrLEP());
  }

  @Test
  public void test12()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.use("2W6+0", (-1));
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrKAP());
  }

  @Test
  public void test13()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      Vector<FightValue> vector0 = hero0.getFightvalues();
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isMagican());
      assertNotNull(vector0);
      assertEquals(false, hero0.isPriest());
      assertEquals(-1, hero0.getCurrLEP());
  }

  @Test
  public void test14()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = namespaceStack0.getDocumentFactory();
      QName qName0 = documentFactory0.createQName("2W6+0", "2W6+0");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.toString();
      assertEquals(false, hero0.isPriest());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrLEP());
  }

  @Test
  public void test15()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getCurrLEP();
      assertEquals((-1), int0);
      assertEquals(false, hero0.isMagican());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
  }

  @Test
  public void test16()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      Namespace namespace0 = nonLazyElement0.getNamespace();
      DOMElement dOMElement0 = new DOMElement((String) null, namespace0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument((String) null, dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.getSelectedWeapon();
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isPriest());
      assertEquals(false, hero0.isMagican());
      assertEquals(0, hero0.getCurrINI());
  }

  @Test
  public void test17()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      Namespace namespace0 = nonLazyElement0.getNamespace();
      DOMElement dOMElement0 = new DOMElement((String) null, namespace0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument((String) null, dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.cast((String) null, 576);
      assertEquals(false, hero0.isPriest());
      assertEquals(false, hero0.isMagican());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrLEP());
  }

  @Test
  public void test18()  throws Throwable  {
      Namespace namespace0 = Namespace.get("\u00DF");
      DOMElement dOMElement0 = new DOMElement("\u00DF", namespace0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      int int0 = hero0.getCurrASP();
      assertEquals(false, hero0.isPriest());
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(0, hero0.getCurrINI());
      assertEquals((-1), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      Namespace namespace0 = Namespace.get("\u00DF");
      DOMElement dOMElement0 = new DOMElement("\u00DF", namespace0);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      hero0.defense("\u00DF", (-500));
      assertEquals(0, hero0.getCurrINI());
      assertEquals(false, hero0.isPriest());
      assertEquals(false, hero0.isMagican());
      assertEquals(-1, hero0.getCurrLEP());
  }

  @Test
  public void test20()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      Namespace namespace0 = nonLazyElement0.getNamespace();
      DOMElement dOMElement0 = new DOMElement((String) null, namespace0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument((String) null, dOMElement0, dOMDocumentType0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertNotNull(hero0);
      
      Vector<Attribute> vector0 = hero0.getAttributes();
      assertEquals(-1, hero0.getCurrLEP());
      assertNotNull(vector0);
      assertEquals(false, hero0.isPriest());
      assertEquals(false, hero0.isMagican());
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrASP());
  }

  @Test
  public void test21()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      dOMElement0.addElement("", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      Hero hero0 = new Hero((Document) dOMDocument0);
      assertEquals(false, hero0.isPriest());
      assertNotNull(hero0);
      assertEquals(0, hero0.getCurrINI());
      assertEquals(-1, hero0.getCurrLEP());
      assertEquals(false, hero0.isMagican());
  }

  @Test
  public void test22()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("Q6k.7<TL_ACRK");
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType("Q6k.7<TL_ACRK", "Q6k.7<TL_ACRK");
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) userDataElement0, (DocumentType) defaultDocumentType0);
      QName qName0 = QName.get("sonderfertigkeit", "sonderfertigkeit");
      DOMElement dOMElement0 = new DOMElement(qName0, 0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("Q6k.7<TL_ACRK", "Q6k.7<TL_ACRK", "sonderfertigkeit");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      userDataElement0.appendContent((Branch) dOMDocument0);
      Hero hero0 = null;
      try {
        hero0 = new Hero((Document) defaultDocument0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
