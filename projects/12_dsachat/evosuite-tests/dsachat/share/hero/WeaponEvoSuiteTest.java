/*
 * This file was automatically generated by EvoSuite
 */

package dsachat.share.hero;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import dsachat.share.hero.FightValue;
import dsachat.share.hero.Weapon;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class WeaponEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Weapon weapon0 = Weapon.DRESCHFLEGEL;
      String string0 = weapon0.getName();
      assertEquals("Dreschflegel", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Weapon weapon0 = Weapon.SCHWERER_DOLCH;
      int int0 = weapon0.getDices();
      assertEquals(1, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Weapon weapon0 = null;
      try {
        weapon0 = new Weapon("z", "z", "z", 809, 809, 809);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"z\"
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Weapon weapon0 = Weapon.STREITAXT;
      FightValue fightValue0 = weapon0.getType();
      assertNull(fightValue0);
  }

  @Test
  public void test4()  throws Throwable  {
      Weapon weapon0 = Weapon.STREITAXT;
      FightValue fightValue0 = new FightValue("Streitaxt WM: 0/-1 Damage: 1W6+4 TP/KK: 13/2", 338, (-952));
      weapon0.setType(fightValue0);
      assertEquals(338, fightValue0.getAttack());
  }

  @Test
  public void test5()  throws Throwable  {
      Weapon weapon0 = Weapon.DRESCHFLEGEL;
      int int0 = weapon0.getKkMin();
      assertEquals(12, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      Weapon weapon0 = new Weapon();
      assertEquals(0, weapon0.getSides());
      assertEquals(0, weapon0.getDmgMod());
      assertEquals(0, weapon0.getDices());
      assertEquals(0, weapon0.getIniMod());
      assertEquals(" WM:  Damage:  TP/KK: 0/0", weapon0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      Weapon weapon0 = Weapon.KURZSCHWERT;
      int int0 = weapon0.getSides();
      assertEquals(6, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      Weapon weapon0 = Weapon.KRIEGSLANZE;
      int int0 = weapon0.getDmgMod();
      assertEquals(3, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      Weapon weapon0 = Weapon.DRESCHFLEGEL;
      int int0 = weapon0.getIniMod();
      assertEquals((-2), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Weapon weapon0 = Weapon.KURZSCHWERT;
      // Undeclared exception!
      try {
        weapon0.getAt();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Weapon weapon0 = Weapon.KRIEGSLANZE;
      // Undeclared exception!
      try {
        weapon0.getDe();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Weapon weapon0 = new Weapon("");
      assertEquals(" WM:  Damage:  TP/KK: 0/0", weapon0.toString());
      assertEquals(0, weapon0.getIniMod());
      assertEquals(0, weapon0.getDmgMod());
      assertEquals(0, weapon0.getDices());
      assertEquals(0, weapon0.getSides());
  }

  @Test
  public void test13()  throws Throwable  {
      Weapon weapon0 = Weapon.KURZSCHWERT;
      int int0 = weapon0.getKkStep();
      assertEquals(4, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Weapon weapon0 = Weapon.DRESCHFLEGEL;
      String string0 = weapon0.toString();
      assertNotNull(string0);
      assertEquals("Dreschflegel WM: -2/-3 Damage: 1W6+3 TP/KK: 12/3", string0);
  }
}
