/*
 * This file was automatically generated by EvoSuite
 */

package com.ib.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ib.client.Contract;
import com.ib.client.EClientSocket;
import com.ib.client.EException;
import com.ib.client.ExecutionFilter;
import com.ib.client.Order;
import com.ib.client.ScannerSubscription;
import java.io.IOException;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EClientSocketEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send((long) 512);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send(0.0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Proxy proxy0 = Proxy.NO_PROXY;
      Socket socket0 = new Socket(proxy0);
      try {
        eClientSocket0.createDataInputStream(socket0);
        fail("Expecting exception: SocketException");
      } catch(SocketException e) {
        /*
         * Socket is not connected
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Socket socket0 = new Socket();
      try {
        eClientSocket0.createDataOutputStream(socket0);
        fail("Expecting exception: SocketException");
      } catch(SocketException e) {
        /*
         * Socket is not connected
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.error("");
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         *  [id = -1, errorCode = -1]
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.close();
      assertEquals(false, eClientSocket0.isConnected());
  }

  @Test
  public void test6()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try {
        eClientSocket0.reqRealTimeBars(0, contract0, 0, (String) null, false);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send('\"');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.setServerLogLevel(9);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          EClientSocket eClientSocket0 = new EClientSocket();
          // Undeclared exception!
          try {
            eClientSocket0.eConnect("Y8O\")8", 933, 933);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.net.SocketPermission Y8O\")8 resolve)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1031)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1145)
             * java.net.InetAddress.getAllByName(InetAddress.java:1083)
             * java.net.InetAddress.getAllByName(InetAddress.java:1019)
             * java.net.InetAddress.getByName(InetAddress.java:969)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:124)
             * java.net.Socket.<init>(Socket.java:189)
             * com.ib.client.EClientSocket.createSocket(EClientSocket.java:1461)
             * com.ib.client.EClientSocket.eConnect(EClientSocket.java:220)
             * sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(1);
      assertNotNull(string0);
      assertEquals("GROUPS", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(3);
      assertNotNull(string0);
      assertEquals("ALIASES", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName((-254));
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.serverVersion();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.TwsConnectionTime();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.eDisconnect();
      assertEquals(false, eClientSocket0.isConnected());
  }

  @Test
  public void test17()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelScannerSubscription(1201);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqScannerParameters();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      try {
        eClientSocket0.reqScannerSubscription(200, scannerSubscription0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try {
        eClientSocket0.reqMktData(504, contract0, (String) null, false);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelHistoricalData((-741));
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelRealTimeBars(1);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract(27, ";36xJj=)9n9vk", ";36xJj=)9n9vk", ";36xJj=)9n9vk", (double) 27, ";36xJj=)9n9vk", ";36xJj=)9n9vk", ";36xJj=)9n9vk", ";36xJj=)9n9vk", ";36xJj=)9n9vk", (Vector) null, (String) null, true, (String) null, (String) null);
      try {
        eClientSocket0.reqHistoricalData(1439, contract0, (String) null, (String) null, ";36xJj=)9n9vk", (String) null, 0, 0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try {
        eClientSocket0.reqContractDetails((-344), contract0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract(842, "", "", "", (double) 0, "", "", "", "", "", (Vector) null, "", true, "", "");
      try {
        eClientSocket0.reqMktDepth(0, contract0, 0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelMktData(23);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelMktDepth((-1));
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try {
        eClientSocket0.exerciseOptions(0, contract0, 0, 0, (String) null, 0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Order order0 = new Order();
      Contract contract0 = new Contract(511, "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", (double) 511, "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", "Unknown contract. Verify te contract details supplied.", (Vector) null, "", true, (String) null, (String) null);
      try {
        eClientSocket0.placeOrder(511, contract0, order0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqAccountUpdates(false, "JpwzQ1p: {B^HEc.bR");
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ExecutionFilter executionFilter0 = new ExecutionFilter((-159), "", "", "", "", "", "");
      try {
        eClientSocket0.reqExecutions(0, executionFilter0);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelOrder(16);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqOpenOrders();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test34()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqIds(24);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test35()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqNewsBulletins(false);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelNewsBulletins();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test37()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqAutoOpenOrders(false);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqAllOpenOrders();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test39()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqManagedAccts();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test40()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.requestFA((-1));
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test41()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.replaceFA((-560), "DGSQ1Ew");
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test42()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.reqCurrentTime();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test43()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try {
        eClientSocket0.reqFundamentalData((-639), contract0, (String) null);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test44()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.cancelFundamentalData(200);
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }

  @Test
  public void test45()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test46()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try {
        eClientSocket0.send(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try {
        eClientSocket0.dataInputStream();
        fail("Expecting exception: EException");
      } catch(EException e) {
        /*
         * Not connected [id = -1, errorCode = 504]
         */
      }
  }
}
