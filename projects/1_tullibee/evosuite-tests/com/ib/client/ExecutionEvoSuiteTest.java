/*
 * This file was automatically generated by EvoSuite
 */

package com.ib.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ib.client.Execution;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExecutionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Execution execution0 = new Execution();
      boolean boolean0 = execution0.equals((Object) execution0);
      assertEquals(0, execution0.m_permId);
      assertEquals(true, boolean0);
      assertEquals(0, execution0.m_cumQty);
      assertEquals(0, execution0.m_liquidation);
      assertEquals(0, execution0.m_clientId);
      assertEquals(0, execution0.m_orderId);
      assertEquals(0.0, execution0.m_price, 0.01D);
      assertEquals(0.0, execution0.m_avgPrice, 0.01D);
      assertEquals(0, execution0.m_shares);
  }

  @Test
  public void test1()  throws Throwable  {
      Execution execution0 = new Execution();
      boolean boolean0 = execution0.equals((Object) null);
      assertEquals(0, execution0.m_cumQty);
      assertEquals(0.0, execution0.m_price, 0.01D);
      assertEquals(0.0, execution0.m_avgPrice, 0.01D);
      assertEquals(0, execution0.m_orderId);
      assertEquals(0, execution0.m_shares);
      assertEquals(0, execution0.m_liquidation);
      assertEquals(false, boolean0);
      assertEquals(0, execution0.m_permId);
      assertEquals(0, execution0.m_clientId);
  }

  @Test
  public void test2()  throws Throwable  {
      Execution execution0 = new Execution(1, 0, "", "", "", "", "", 1, (-775.9541496412483), (-1), 1, 0, (double) (-1));
      Execution execution1 = new Execution();
      boolean boolean0 = execution0.equals((Object) execution1);
      assertEquals((-1), execution0.m_permId);
      assertEquals(0, execution1.m_shares);
      assertEquals(1, execution0.m_liquidation);
      assertEquals(0.0, execution1.m_avgPrice, 0.01D);
      assertEquals(0, execution0.m_cumQty);
      assertEquals(1, execution0.m_orderId);
      assertEquals(0, execution1.m_orderId);
      assertEquals(false, boolean0);
      assertEquals((-775.9541496412483), execution0.m_price, 0.01D);
      assertEquals(0, execution1.m_liquidation);
      assertEquals((-1.0), execution0.m_avgPrice, 0.01D);
      assertEquals(1, execution0.m_shares);
      assertEquals(0.0, execution1.m_price, 0.01D);
      assertEquals(0, execution0.m_clientId);
  }
}
