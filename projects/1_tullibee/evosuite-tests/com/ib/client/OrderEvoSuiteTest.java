/*
 * This file was automatically generated by EvoSuite
 */

package com.ib.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ib.client.Order;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OrderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) null);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01D);
      assertEquals(true, order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01D);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01D);
      assertEquals(false, order0.m_outsideRth);
      assertEquals(0, order0.m_origin);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01D);
      assertEquals(0, order0.m_origin);
      assertEquals(true, boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01D);
      assertEquals(true, order0.m_transmit);
      assertEquals(false, order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01D);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01D);
      assertEquals(true, boolean0);
  }
}
