/*
 * This file was automatically generated by EvoSuite
 */

package com.ib.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ib.client.ScannerSubscription;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ScannerSubscriptionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      
      scannerSubscription0.couponRateBelow(0.0);
      assertEquals(-1, scannerSubscription0.numberOfRows());
  }

  @Test
  public void test2()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.excludeConvertible("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateAbove();
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateBelow("V*x{_dWSu0rBmFfT$#");
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow();
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      
      scannerSubscription0.averageOptionVolumeAbove(1);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.aboveVolume((-1795));
      assertEquals(-1795, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scannerSettingPairs();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test
  public void test14()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scanCode("");
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.marketCapBelow(796.073826279912);
      assertEquals(796.073826279912, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.stockTypeFilter("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
  }

  @Test
  public void test17()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.abovePrice();
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.instrument("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.locationCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove((String) null);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
  }

  @Test
  public void test23()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.abovePrice(1561.0748744037935);
      assertEquals(1561.0748744037935, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.numberOfRows((-125));
      assertEquals(-125, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.belowPrice((double) Integer.MAX_VALUE);
      assertEquals(2.147483647E9, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      
      scannerSubscription0.couponRateAbove((-1.0));
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test
  public void test29()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.locationCode((String) null);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.stockTypeFilter();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow("");
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.marketCapAbove(92.23299081413151);
      assertEquals(92.23299081413151, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
  }

  @Test
  public void test33()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.aboveVolume();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.excludeConvertible();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
  }

  @Test
  public void test35()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove();
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingAbove();
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingAbove("%X_#{vd$DVRI!b");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.couponRateBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scannerSettingPairs("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
  }

  @Test
  public void test40()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingBelow("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals(-1, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test
  public void test41()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.numberOfRows();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.aboveVolume());
      assertEquals((-1), int0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01D);
      assertEquals(2147483647, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01D);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01D);
  }
}
