/*
 * This file was automatically generated by EvoSuite
 */

package com.ib.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.ib.client.TickType;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TickTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertNotNull(tickType0);
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = TickType.getField(0);
      assertEquals("bidSize", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = TickType.getField(6);
      assertEquals("high", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = TickType.getField(1);
      assertEquals("bidPrice", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = TickType.getField(2);
      assertEquals("askPrice", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = TickType.getField(3);
      assertEquals("askSize", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = TickType.getField(4);
      assertEquals("lastPrice", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = TickType.getField(5);
      assertEquals("lastSize", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = TickType.getField(7);
      assertEquals("low", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = TickType.getField(8);
      assertEquals("volume", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = TickType.getField(9);
      assertEquals("close", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = TickType.getField(10);
      assertEquals("bidOptComp", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = TickType.getField(11);
      assertEquals("askOptComp", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = TickType.getField(12);
      assertEquals("lastOptComp", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = TickType.getField(13);
      assertEquals("modelOptComp", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = TickType.getField(14);
      assertEquals("open", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = TickType.getField(15);
      assertEquals("13WeekLow", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = TickType.getField(16);
      assertEquals("13WeekHigh", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = TickType.getField(17);
      assertEquals("26WeekLow", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = TickType.getField(18);
      assertEquals("26WeekHigh", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = TickType.getField(19);
      assertEquals("52WeekLow", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = TickType.getField(20);
      assertEquals("52WeekHigh", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = TickType.getField(21);
      assertEquals("AvgVolume", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = TickType.getField(22);
      assertEquals("OpenInterest", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = TickType.getField(23);
      assertEquals("OptionHistoricalVolatility", string0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = TickType.getField(24);
      assertEquals("OptionImpliedVolatility", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = TickType.getField(25);
      assertEquals("OptionBidExchStr", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = TickType.getField(26);
      assertEquals("OptionAskExchStr", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = TickType.getField(27);
      assertEquals("OptionCallOpenInterest", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = TickType.getField(28);
      assertEquals("OptionPutOpenInterest", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = TickType.getField(29);
      assertEquals("OptionCallVolume", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = TickType.getField(30);
      assertEquals("OptionPutVolume", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = TickType.getField(31);
      assertEquals("IndexFuturePremium", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = TickType.getField(32);
      assertEquals("bidExch", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = TickType.getField(33);
      assertEquals("askExch", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = TickType.getField(34);
      assertEquals("auctionVolume", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = TickType.getField(35);
      assertEquals("auctionPrice", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = TickType.getField(36);
      assertEquals("auctionImbalance", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = TickType.getField(37);
      assertEquals("markPrice", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = TickType.getField(38);
      assertEquals("bidEFP", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = TickType.getField(39);
      assertEquals("askEFP", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = TickType.getField(40);
      assertEquals("lastEFP", string0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = TickType.getField(41);
      assertEquals("openEFP", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = TickType.getField(42);
      assertEquals("highEFP", string0);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = TickType.getField(43);
      assertEquals("lowEFP", string0);
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = TickType.getField(44);
      assertEquals("closeEFP", string0);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = TickType.getField(45);
      assertEquals("lastTimestamp", string0);
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = TickType.getField(46);
      assertEquals("shortable", string0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = TickType.getField(47);
      assertEquals("fundamentals", string0);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = TickType.getField(48);
      assertEquals("RTVolume", string0);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = TickType.getField(49);
      assertEquals("halted", string0);
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = TickType.getField((-1483));
      assertEquals("unknown", string0);
  }
}
