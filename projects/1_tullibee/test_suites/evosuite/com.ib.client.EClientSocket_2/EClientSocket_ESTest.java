/*
 * This file was automatically generated by EvoSuite
 * Sun May 05 03:01:42 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.EClientErrors;
import com.ib.client.EClientSocket;
import com.ib.client.EException;
import com.ib.client.ExecutionFilter;
import com.ib.client.Order;
import com.ib.client.ScannerSubscription;
import com.ib.client.TagValue;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EClientSocket_ESTest extends EClientSocket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(1, "  It does not support secIdType and secId parameters.");
      EException eException0 = eClientSocket0.createEException((-3842), eClientErrors_CodeMsgPair0);
      assertEquals((-3842), eException0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(102, "@0q.X2/hmtZ<HHCWp@");
      EException eException0 = eClientSocket0.createEException(2415, eClientErrors_CodeMsgPair0);
      assertEquals(2415, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-3945), (String) null);
      EException eException0 = eClientSocket0.createEException(0, eClientErrors_CodeMsgPair0);
      assertEquals(0, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.error(0, 0, "9e`zZt#S9b9s}[Lq-");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 9e`zZt#S9b9s}[Lq- [id = 0, errorCode = 0]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.eConnect("", 1397, 1397);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@4169fda9
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1397);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.eConnect("", 1397, 1397);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createSocket((String) null, (-2436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2436
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createEException(9, (EClientErrors.CodeMsgPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        eClientSocket0.createDataOutputStream(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createDataInputStream((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      boolean boolean0 = eClientSocket0.isConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.dataInputStream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelFundamentalData(1341);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqCurrentTime();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.replaceFA(0, "g<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.requestFA((-262));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqManagedAccts();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqAllOpenOrders();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqAutoOpenOrders(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelNewsBulletins();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqNewsBulletins(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqIds((-298));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqOpenOrders();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelOrder(515);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ExecutionFilter executionFilter0 = new ExecutionFilter(3, "/c>@LSB0]", "/c>@LSB0]", "", "", "", "/c>@LSB0]");
      try { 
        eClientSocket0.reqExecutions((-6551), executionFilter0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqAccountUpdates(false, "Reques For Executins SBding Error -");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<TagValue> vector0 = new Vector<TagValue>();
      Contract contract0 = new Contract(1, "r", "", (String) null, 0.0, "dhmnL~BEeExvgRSG", "", "]y[ C}c'j#f9cf_z", "J#=]W;A", "", vector0, "J#=]W;A", true, "UQ[T}R-2\"cBJUq", "");
      Order order0 = new Order();
      try { 
        eClientSocket0.placeOrder(Integer.MAX_VALUE, contract0, order0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try { 
        eClientSocket0.exerciseOptions((-2314), contract0, 2448, (-2314), "#<HX4", 515);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelMktDepth(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelMktData(21);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqMktDepth(677, (Contract) null, 677);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract(98, "&O8??]ndCT", "&O8??]ndCT", "&O8??]ndCT", 0.0, "&O8??]ndCT", "", "Request Scanner Subscription Sending Error - ", "JvUYyifU`zu#$rb", "", vector0, "com.ib.client.ComboLeg", false, "", "Request Scanner Subscription Sending Error - ");
      try { 
        eClientSocket0.reqContractDetails(102, contract0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try { 
        eClientSocket0.reqRealTimeBars(1, contract0, 1, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try { 
        eClientSocket0.reqHistoricalData(2554, contract0, (String) null, (String) null, (String) null, "/heACX:]`EzR]b,/K 2", 2554, 63);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelRealTimeBars(2742);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelHistoricalData(1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      try { 
        eClientSocket0.reqMktData(1258, contract0, "&|o=U_m(Dm", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      try { 
        eClientSocket0.reqScannerSubscription(2, scannerSubscription0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.reqScannerParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.cancelScannerSubscription(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.eDisconnect();
      assertFalse(eClientSocket0.isConnected());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.eConnect("H^|", (-189), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-189
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.TwsConnectionTime();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.serverVersion();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(3);
      assertNotNull(string0);
      assertEquals("ALIASES", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(2);
      assertEquals("PROFILES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(1);
      assertNotNull(string0);
      assertEquals("GROUPS", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.setServerLogLevel(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.error("ALIASES");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ALIASES [id = -1, errorCode = -1]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send((-393L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send((-438.763960041126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send('');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<String> vector0 = new Vector<String>();
      Contract contract0 = new Contract(594, (String) null, (String) null, "|qf", 0.0, ",/N", "", "|qf", "", "8V<Y", vector0, "ln&}G!&F}vK+E$;1", false, "ln&}G!&F}vK+E$;1", "E'^2c53%+Pu>");
      try { 
        eClientSocket0.reqFundamentalData(0, contract0, "78");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createDataOutputStream((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, "");
      EException eException0 = eClientSocket0.createEException(0, eClientErrors_CodeMsgPair0);
      assertEquals(0, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        eClientSocket0.createDataInputStream(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.createSocket("", 2847);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@416aad3f
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.close();
      assertEquals(1, EClientSocket.GROUPS);
  }
}
