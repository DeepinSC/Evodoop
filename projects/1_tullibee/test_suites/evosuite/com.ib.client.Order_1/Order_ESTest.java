/*
 * This file was automatically generated by EvoSuite
 * Sun May 05 02:47:04 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Order;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      
      order0.m_allOrNone = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertTrue(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals((-3002), order0.m_permId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_overridePercentageConstraints);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_auctionStrategy);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      
      order0.m_hidden = true;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertTrue(order0.m_hidden);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals((-211), order1.m_permId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_auctionStrategy);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      
      order1.m_triggerMethod = (-2891);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals((-3002), order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order1.m_transmit);
      assertEquals((-2891), order1.m_triggerMethod);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.FIRM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_origin);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
      
      order1.m_displaySize = (-1942);
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.FIRM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals((-1942), order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals((-211), order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_origin);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_totalQuantity);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_notHeld);
      assertEquals(1, Order.FIRM);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      
      order1.m_permId = (-185);
      order1.m_overridePercentageConstraints = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_totalQuantity);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertTrue(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_notHeld);
      assertEquals(1, Order.FIRM);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals((-185), order1.m_permId);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_notHeld);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
      
      order0.m_parentId = 2318;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(2318, order0.m_parentId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals((-3002), order0.m_permId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_notHeld);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
      
      order1.m_parentId = 4780;
      order1.m_permId = (-185);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals((-185), order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(4780, order1.m_parentId);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_orderId);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_parentId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_ocaType);
      
      order0.m_auxPrice = (-252.156659);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals((-252.156659), order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_orderId);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals((-3002), order0.m_permId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_parentId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_ocaType);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_continuousUpdate);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      
      order1.m_lmtPrice = (-2030.384854466962);
      order0.m_permId = (-5902);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals((-5902), order0.m_permId);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_continuousUpdate);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals((-2030.384854466962), order1.m_lmtPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
      
      order1.m_totalQuantity = 2;
      order0.m_permId = (-5931);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals((-5931), order0.m_permId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(2, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      
      order1.m_permId = 716;
      order0.m_clientId = Integer.MAX_VALUE;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_clientId);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(716, order1.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      
      order0.m_orderId = (-2181);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_auctionStrategy);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      
      order0.m_permId = (-5931);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals((-5931), order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals((-2181), order0.m_orderId);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_auctionStrategy);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_orderId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertTrue(order0.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      
      order0.m_orderId = (-2181);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      
      order0.m_permId = (-5931);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals((-2181), order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals((-5931), order0.m_permId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertTrue(order0.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_parentId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_origin);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        order0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.ib.client.Order
         //
         verifyException("com.ib.client.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      
      order1.m_permId = (int) 'f';
      order1.m_algoStrategy = "quM3\"5";
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(102, order1.m_permId);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_outsideRth);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_permId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      
      order1.m_permId = (int) 'f';
      order0.m_settlingFirm = "S.|fQpSF[+ ";
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_outsideRth);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(102, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      
      order0.m_account = "com.ib.client.Util";
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      
      order1.m_permId = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(102, order1.m_permId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_outsideRth);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_permId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      
      order1.m_permId = (-211);
      order1.m_deltaNeutralOrderType = "O1c<}~!$axwP#?1ct";
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_outsideRth);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_eTradeOnly);
      assertEquals((-211), order1.m_permId);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_orderId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      
      order0.m_openClose = "";
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
      
      order1.m_permId = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_orderId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(102, order1.m_permId);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      
      order0.m_permId = (-2091);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      
      order0.m_faMethod = "O";
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals((-2091), order0.m_permId);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      
      order1.m_permId = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertTrue(order0.equals((Object)order1));
      assertTrue(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertTrue(boolean0);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals(102, order1.m_permId);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      
      order0.m_orderRef = ".4{B-<D-`P";
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_hidden);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
      
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals((-211), order1.m_permId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_hidden);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_firmQuoteOnly);
      assertFalse(order1.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_continuousUpdate);
      
      order1.m_permId = (int) 'f';
      order1.m_ocaGroup = "gm4mkM=_e";
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_firmQuoteOnly);
      assertFalse(order1.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(102, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_continuousUpdate);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      
      order0.m_permId = 4090;
      order0.m_tif = "wBGePGJ`9|8*";
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_allOrNone);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(4090, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_auctionStrategy);
      
      order0.m_orderType = " 'xDvkk";
      order1.m_permId = (int) 'n';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(110, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_auctionStrategy);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      
      order1.m_action = "O";
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals((-211), order1.m_permId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      
      order1.m_notHeld = true;
      order1.m_permId = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(102, order1.m_permId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_orderId);
      assertTrue(order1.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      
      order1.m_scalePriceIncrement = 1384.1;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_orderId);
      assertEquals(1384.1, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals((-211), order1.m_permId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_whatIf);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      
      order0.m_scaleSubsLevelSize = 12;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertTrue(order1.m_transmit);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(12, order0.m_scaleSubsLevelSize);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals((-211), order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertTrue(order1.m_transmit);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
      
      order1.m_scaleInitLevelSize = 1;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals((-211), order1.m_permId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_auctionStrategy);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      
      order1.m_permId = (-211);
      order1.m_basisPointsType = 0;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals((-211), order1.m_permId);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_basisPointsType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_whatIf);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      
      order1.m_permId = (int) 'f';
      order0.m_basisPoints = (-315.42);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals((-315.42), order0.m_basisPoints, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_whatIf);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(102, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_displaySize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_permId);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      
      order1.m_permId = (-211);
      order1.m_deltaNeutralAuxPrice = 5509.27309858998;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertEquals(5509.27309858998, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_displaySize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals((-211), order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      
      order0.m_referencePriceType = (-3374);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals((-3374), order0.m_referencePriceType);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals((-211), order1.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertTrue(order0.m_transmit);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      
      order1.m_continuousUpdate = 121;
      order1.m_permId = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertTrue(order0.m_transmit);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(121, order1.m_continuousUpdate);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(102, order1.m_permId);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_sweepToFill);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      
      order1.m_permId = (-211);
      order0.m_volatilityType = 675;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(675, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_sweepToFill);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals((-211), order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_origin);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      
      order1.m_permId = (-211);
      order1.m_volatility = 2263.3618231565506;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertTrue(order0.m_transmit);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals((-211), order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(2263.3618231565506, order1.m_volatility, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_displaySize);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      
      order0.m_stockRangeUpper = 0.0;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_blockOrder);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0.0, order0.m_stockRangeUpper, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals((-211), order1.m_permId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_whatIf);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_orderId);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      
      order0.m_stockRangeLower = 2263.362;
      order1.m_permId = (-185);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_allOrNone);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(2263.362, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertEquals((-185), order1.m_permId);
      assertEquals(0, order1.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_displaySize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_orderId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_orderId);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_displaySize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      
      order1.m_permId = (int) 'f';
      order0.m_delta = (-476.14351415853);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals((-476.14351415853), order0.m_delta, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(102, order1.m_permId);
      assertFalse(order1.m_eTradeOnly);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_orderId);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order1.m_displaySize);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_whatIf);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      
      order1.m_permId = (int) 'f';
      order0.m_stockRefPrice = (double) 0;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(102, order1.m_permId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_whatIf);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_firmQuoteOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_origin);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      
      order1.m_permId = (int) 'f';
      order0.m_startingPrice = (-1336.5);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals((-1336.5), order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(102, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_displaySize);
      assertFalse(order1.m_firmQuoteOnly);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(0, order1.m_origin);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_sweepToFill);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      
      order0.m_auctionStrategy = 1836;
      order0.m_permId = (-5931);
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
      
      boolean boolean0 = order0.equals(order1);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1836, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals((-5931), order0.m_permId);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_allOrNone);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_whatIf);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_clientId);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('f', Order.OPT_FIRM);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_sweepToFill);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_origin);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      
      order0.m_permId = (-5902);
      order1.m_nbboPriceCap = 1747.9399941870618;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertEquals((-5902), order0.m_permId);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order1.m_hidden);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1747.9399941870618, order1.m_nbboPriceCap, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_origin);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_continuousUpdate);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_clientId);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      
      order0.m_discretionaryAmt = 1384.1;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
      
      order1.m_permId = (-185);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_continuousUpdate);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1384.1, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_clientId);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order1.m_clientId);
      assertEquals((-185), order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_allOrNone);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_orderId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_eTradeOnly);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Order order0 = new Order();
      assertNotNull(order0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertNotNull(order1);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_firmQuoteOnly);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
      
      order0.m_shortSaleSlot = 2;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(2, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_notHeld);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_firmQuoteOnly);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals((-211), order1.m_permId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0, order1.m_orderId);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_displaySize);
      assertTrue(order1.m_transmit);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = (-211);
      order0.m_origin = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_trailStopPrice = 1.0;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 1;
      order0.m_percentOffset = 2820.7022326707;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_minQty = (-835);
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_allOrNone = true;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = (-211);
      order1.m_hidden = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_outsideRth = true;
      order1.m_permId = (-254);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-2091);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_triggerMethod = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_displaySize = (-2147483647);
      order1.m_permId = 716;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Order order0 = new Order();
      order0.m_sweepToFill = true;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = (-254);
      order1.m_blockOrder = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_transmit = false;
      order1.m_permId = (-211);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-3002);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_ocaType = 1796;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = (-211);
      order0.m_auxPrice = (-2944.448);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_lmtPrice = (-2030.384854466962);
      order0.m_permId = (-5902);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_totalQuantity = 2;
      order0.m_permId = (-5931);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 716;
      order0.m_clientId = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertTrue(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) null);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals(order0);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertTrue(order0.m_transmit);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_faProfile = "O";
      order1.m_permId = (-185);
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }
}
