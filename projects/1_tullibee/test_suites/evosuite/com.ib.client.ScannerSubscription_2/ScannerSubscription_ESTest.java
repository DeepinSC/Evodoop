/*
 * This file was automatically generated by EvoSuite
 * Sun May 05 02:51:51 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ib.client.ScannerSubscription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScannerSubscription_ESTest extends ScannerSubscription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.numberOfRows(2338);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(2338);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove((double) 2338);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("D\"O");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(0);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow((double) 2338);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("gk");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(1.7976931348623157E308);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice(0.0);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(0);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.moodyRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("D\"O", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.locationCode("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("FZ`+<d");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(2338.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(1.0);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("FZ`+<d");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.locationCode();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = scannerSubscription0.spRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      String string3 = scannerSubscription0.stockTypeFilter();
      assertFalse(string3.equals((Object)string1));
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string3);
      assertEquals("gk", string3);
      
      scannerSubscription0.averageOptionVolumeAbove((-1));
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.abovePrice();
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("gk", scannerSubscription0.stockTypeFilter());
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(2338.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("FZ`+<d", scannerSubscription0.scanCode());
      assertEquals(2338, scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("FZ`+<d", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scannerSettingPairs("(N p6q8LZVIx");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("(N p6q8LZVIx");
      assertEquals("(N p6q8LZVIx", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(537.2074824609);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(537.2074824609, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("(N p6q8LZVIx");
      assertEquals("(N p6q8LZVIx", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(537.2074824609, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("(N p6q8LZVIx");
      assertEquals("(N p6q8LZVIx", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(537.2074824609, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("C|O5P#VT&5:JItz");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("C|O5P#VT&5:JItz");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("(N p6q8LZVIx");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("C|O5P#VT&5:JItz");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.aboveVolume();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      String string0 = scannerSubscription0.moodyRatingAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string1 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      String string2 = scannerSubscription0.moodyRatingAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      String string3 = scannerSubscription0.spRatingAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string3);
      assertEquals("C|O5P#VT&5:JItz", string3);
      
      scannerSubscription0.couponRateBelow((-1191.5326780543148));
      assertEquals((-1191.5326780543148), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("(N p6q8LZVIx", scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("(N p6q8LZVIx", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.maturityDateAbove());
      assertEquals("C|O5P#VT&5:JItz", scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.locationCode("AI?5:'ep;_sH2:9");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("WBcX6");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("WBcX6", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("N2z;<[");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("com.ib.client.ScannerSubscription");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("AI?5:'ep;_sH2:9", scannerSubscription0.locationCode());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("/%`=!");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("/%`=!");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(1);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("N_r");
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("N_r");
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("/%`=!", string0);
      
      scannerSubscription0.stockTypeFilter("N_r");
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.locationCode();
      assertFalse(string1.equals((Object)string0));
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = scannerSubscription0.excludeConvertible();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("N_r", string2);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertNull(scannerSubscription0.scanCode());
      assertEquals("N_r", scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("/%`=!", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("N_r", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("/%`=!", scannerSubscription0.spRatingBelow());
      assertEquals("N2z;<[", scannerSubscription0.maturityDateBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.moodyRatingBelow("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument(":|\"ZNur:&1=Cyl");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(877.608208275935);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(877.608208275935, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow((-1666.8498211));
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(877.608208275935, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(877.608208275935, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("e");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("e", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1666.8498211), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("e", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.couponRateBelow(1966.32472252004);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("e", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("e", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("|X{/%:a0WapBLcF\"");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("|X{/%:a0WapBLcF\"", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.moodyRatingBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("|X{/%:a0WapBLcF\"", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("", string1);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("|X{/%:a0WapBLcF\"", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string2 = scannerSubscription0.maturityDateAbove();
      assertTrue(string2.equals((Object)string1));
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("|X{/%:a0WapBLcF\"", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("", string2);
      
      scannerSubscription0.maturityDateAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("|X{/%:a0WapBLcF\"", scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1966.32472252004, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(":|\"ZNur:&1=Cyl", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.couponRateBelow(486.1358289861);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.scanCode("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows((-2362));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.maturityDateAbove();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.spRatingBelow("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      String string2 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string3);
      assertEquals("", string3);
      
      scannerSubscription0.stockTypeFilter("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string4 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string4);
      
      scannerSubscription0.scannerSettingPairs("|?,z/-jO");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2362), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(368);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(368, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string5 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(368, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string5);
      
      String string6 = scannerSubscription0.moodyRatingBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(368, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string6);
      
      scannerSubscription0.instrument("5Hkb/Oi7jRItxA");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("5Hkb/Oi7jRItxA", scannerSubscription0.instrument());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(368, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(0);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("5Hkb/Oi7jRItxA", scannerSubscription0.instrument());
      assertEquals(486.1358289861, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals("|?,z/-jO", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(368, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.belowPrice(2933.47484);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(351.9021651631577);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(351.9021651631577, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove((-1.0));
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1.0), scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(351.9021651631577, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1.0), scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(351.9021651631577, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1.0), scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(351.9021651631577, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1.0), double0, 0.01);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1.0), scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(351.9021651631577, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2933.47484, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.stockTypeFilter("Esrl>");
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.moodyRatingBelow();
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.locationCode((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.scanCode();
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      scannerSubscription0.belowPrice(1.7976931348623157E308);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.instrument();
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      scannerSubscription0.couponRateBelow(0.0);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.couponRateBelow();
      assertNotEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = scannerSubscription0.belowPrice();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double2, 0.01);
      
      scannerSubscription0.belowPrice((-2277.5998776228353));
      assertNull(scannerSubscription0.scanCode());
      assertEquals("Esrl>", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove((-3581));
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string3 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string3);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-3581), int0);
      
      scannerSubscription0.spRatingAbove((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(1.7976931348623157E308);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string4 = scannerSubscription0.moodyRatingBelow();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string4);
      
      String string5 = scannerSubscription0.scanCode();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string5);
      
      double double3 = scannerSubscription0.abovePrice();
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double3, 0.01);
      
      scannerSubscription0.moodyRatingBelow((String) null);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-2277.5998776228353), scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(0.0);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double4 = scannerSubscription0.belowPrice();
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-3581), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      String string0 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.couponRateBelow(2679.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("@|NwY~`7-6_E{8$N");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove((String) null);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("@|NwY~`7-6_E{8$N");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume((-2520));
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(0);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow((double) 0);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.moodyRatingAbove((String) null);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice(2679.0);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-2520), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(2679.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(2105);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2105, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(2679.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2105, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(2679.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
      
      scannerSubscription0.abovePrice(0.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.spRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2105, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(2679.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("@|NwY~`7-6_E{8$N", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.numberOfRows(867);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.spRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.aboveVolume(822);
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("~_ !^LL<^5J=|MTI");
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove((String) null);
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("");
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.scanCode();
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      String string3 = scannerSubscription0.spRatingAbove();
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string3);
      
      String string4 = scannerSubscription0.moodyRatingAbove();
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string4);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(867, int0);
      
      scannerSubscription0.abovePrice(3400.24771);
      assertEquals(822, scannerSubscription0.aboveVolume());
      assertEquals(3400.24771, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(867, scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("~_ !^LL<^5J=|MTI", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.moodyRatingBelow("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.couponRateBelow((-1220.71448806));
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      scannerSubscription0.spRatingAbove("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("");
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.spRatingAbove();
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("", string1);
      
      scannerSubscription0.moodyRatingAbove((String) null);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1220.71448806), scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.stockTypeFilter("");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(0);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("S'A[]d@");
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("S'A[]d@", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(1.7976931348623157E308);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("S'A[]d@", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("");
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("S'A[]d@", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.excludeConvertible();
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("S'A[]d@", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.locationCode();
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("S'A[]d@", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("com.ib.client.ScannerSubscription");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume((-1385));
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scannerSettingPairs("@}uD2$ht");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("M+f{O5j4<65b&");
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice(2909.6);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(0.0);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.scannerSettingPairs();
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("@}uD2$ht", string0);
      
      String string1 = scannerSubscription0.maturityDateAbove();
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.excludeConvertible("Z!OsTHnFY$c");
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("Z!OsTHnFY$c");
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove((-1385));
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.scanCode());
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1385), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(0.0);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.scanCode());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1385), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.stockTypeFilter();
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.scanCode());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1385), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.excludeConvertible());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("Z!OsTHnFY$c", scannerSubscription0.scanCode());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1385), scannerSubscription0.aboveVolume());
      assertEquals("M+f{O5j4<65b&", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(2909.6, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1385), scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("@}uD2$ht", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.maturityDateAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("com.ib.client.ScannerSubscription");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("com.ib.client.ScannerSubscription");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow((-108.957754475));
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-108.957754475), scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-108.957754475), scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-108.957754475), double0, 0.01);
      
      scannerSubscription0.scanCode("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-108.957754475), scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove((double) 0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-108.957754475), scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scanCode("X7c{qYFDP7CE,1");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(1.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove(0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0, int0);
      
      String string0 = scannerSubscription0.moodyRatingBelow();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.spRatingAbove();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("X7c{qYFDP7CE,1", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(0.0);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("yBl");
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("yBl");
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume((-645));
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(1352.5145);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice(0.0);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.locationCode();
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.instrument();
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.belowPrice(0.0);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("");
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(1982.8533838);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1982.8533838, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("");
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.maturityDateBelow();
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("", string2);
      
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("yBl", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-645), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1352.5145, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("yBl", scannerSubscription0.scanCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scannerSettingPairs("=f6");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("~.jod|H8Q?9sKE:");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove((-2028.44428662));
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove(0);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.abovePrice();
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      scannerSubscription0.maturityDateBelow("");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow("");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow((double) 0);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow(":$ !WW$835[h*;D+5QB");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(":$ !WW$835[h*;D+5QB", scannerSubscription0.spRatingBelow());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(0);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(":$ !WW$835[h*;D+5QB", scannerSubscription0.spRatingBelow());
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(898.2);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(":$ !WW$835[h*;D+5QB", scannerSubscription0.spRatingBelow());
      assertEquals(898.2, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.couponRateAbove();
      assertNotEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(":$ !WW$835[h*;D+5QB", scannerSubscription0.spRatingBelow());
      assertEquals(898.2, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-2028.44428662), double1, 0.01);
      
      scannerSubscription0.spRatingBelow("~.jod|H8Q?9sKE:");
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(898.2, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.instrument();
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(898.2, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals("=f6", scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("~.jod|H8Q?9sKE:", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(0, scannerSubscription0.numberOfRows());
      assertEquals(898.2, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-2028.44428662), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scannerSettingPairs("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(1.0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      double double1 = scannerSubscription0.marketCapBelow();
      assertEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      String string0 = scannerSubscription0.scannerSettingPairs();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = scannerSubscription0.aboveVolume();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      scannerSubscription0.scanCode("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double2 = scannerSubscription0.marketCapAbove();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.0, double2, 0.01);
      
      scannerSubscription0.instrument("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.stockTypeFilter("}TUs&UTw'.A iO,:");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      scannerSubscription0.maturityDateAbove("}TUs&UTw'.A iO,:");
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(0);
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.couponRateAbove();
      assertEquals(double1, double0, 0.01);
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      scannerSubscription0.scannerSettingPairs("U}W-^~0MjEjyJ`<Y");
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("U}W-^~0MjEjyJ`<Y", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("}TUs&UTw'.A iO,:");
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("U}W-^~0MjEjyJ`<Y", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("}TUs&UTw'.A iO,:");
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("U}W-^~0MjEjyJ`<Y", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.instrument();
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("U}W-^~0MjEjyJ`<Y", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("}TUs&UTw'.A iO,:", string0);
      
      double double2 = scannerSubscription0.couponRateBelow();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("U}W-^~0MjEjyJ`<Y", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double2, 0.01);
      
      scannerSubscription0.scannerSettingPairs("QGnbohgbH(/p!");
      assertEquals("QGnbohgbH(/p!", scannerSubscription0.scannerSettingPairs());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("}TUs&UTw'.A iO,:", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scannerSettingPairs("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("w5,I'h");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("w5,I'h", scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(1.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("w5,I'h", scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.abovePrice();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("w5,I'h", scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string0 = scannerSubscription0.moodyRatingAbove();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals("w5,I'h", scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.moodyRatingBelow((String) null);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows((-2506));
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-2506), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.marketCapBelow();
      assertEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-2506), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      String string1 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-2506), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      String string2 = scannerSubscription0.scanCode();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-2506), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      scannerSubscription0.scanCode("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-2506), scannerSubscription0.numberOfRows());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows((-1896));
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string3 = scannerSubscription0.instrument();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string3);
      assertEquals("", string3);
      
      scannerSubscription0.moodyRatingBelow("Y<}$eBgE\u0004z0>t7')9");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("Y<}$eBgE\u0004z0>t7')9", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string4 = scannerSubscription0.spRatingAbove();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("Y<}$eBgE\u0004z0>t7')9", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string4);
      
      scannerSubscription0.averageOptionVolumeAbove(0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("Y<}$eBgE\u0004z0>t7')9", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string5 = scannerSubscription0.scanCode();
      assertTrue(string5.equals((Object)string3));
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("Y<}$eBgE\u0004z0>t7')9", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string5);
      assertEquals("", string5);
      
      scannerSubscription0.couponRateAbove(1.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("Y<}$eBgE\u0004z0>t7')9", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(0, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals((-1896), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.numberOfRows((-1458));
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("sS$");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("sS$", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("Hy'A5qa");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("sS$", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice(917.6697371376);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(917.6697371376, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("sS$", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("j@CUo>5R$)`{~.~V");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(917.6697371376, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("sS$", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(917.6697371376, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("sS$", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1458), int0);
      
      scannerSubscription0.spRatingBelow("j@CUo>5R$)`{~.~V");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.spRatingBelow());
      assertEquals(917.6697371376, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("j@CUo>5R$)`{~.~V");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("Hy'A5qa", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.spRatingBelow());
      assertEquals(917.6697371376, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("j@CUo>5R$)`{~.~V", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1458), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.moodyRatingBelow("");
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(0.0);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow((String) null);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow((String) null);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(0.0);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("");
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.scanCode();
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = scannerSubscription0.belowPrice();
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = scannerSubscription0.marketCapBelow();
      assertNotEquals(double1, double0, 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      scannerSubscription0.aboveVolume(1);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.maturityDateBelow("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument((String) null);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(590.2273816469426);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove((String) null);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.moodyRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.moodyRatingAbove("");
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.spRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(590.2273816469426, double0, 0.01);
      
      String string2 = scannerSubscription0.moodyRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = scannerSubscription0.spRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals("", scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(590.2273816469426, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.stockTypeFilter(":I");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(":I", scannerSubscription0.stockTypeFilter());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(":I", scannerSubscription0.stockTypeFilter());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.scanCode("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(":I", scannerSubscription0.stockTypeFilter());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow(":I");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(":I", scannerSubscription0.maturityDateBelow());
      assertEquals(":I", scannerSubscription0.stockTypeFilter());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.stockTypeFilter();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(":I", scannerSubscription0.maturityDateBelow());
      assertEquals(":I", scannerSubscription0.stockTypeFilter());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals(":I", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.instrument((String) null);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("f2x#>d[ra_pL");
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("f2x#>d[ra_pL", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("");
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode((String) null);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow((double) (-1));
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove((-1));
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove((-2149.623584518398));
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("com.ib.client.ScannerSubscription");
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.couponRateAbove();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-2149.623584518398), double0, 0.01);
      
      scannerSubscription0.aboveVolume((-1));
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1), int0);
      
      String string1 = scannerSubscription0.stockTypeFilter();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.scanCode("2`;}&vL");
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals((-1.0), scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals("2`;}&vL", scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-2149.623584518398), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      String string0 = scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.spRatingBelow((String) null);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("L*hO");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(0.0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("P7");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      scannerSubscription0.spRatingAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(4300);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode((String) null);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.couponRateAbove();
      assertEquals(double1, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      scannerSubscription0.averageOptionVolumeAbove(4300);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scannerSettingPairs("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(4300, int0);
      
      scannerSubscription0.scanCode("L*hO");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.stockTypeFilter();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      String string3 = scannerSubscription0.moodyRatingAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string3);
      
      String string4 = scannerSubscription0.locationCode();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(4300, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string4);
      assertEquals("P7", string4);
      
      scannerSubscription0.averageOptionVolumeAbove(3103);
      assertEquals(3103, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("P7", scannerSubscription0.locationCode());
      assertEquals(0.0, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("L*hO", scannerSubscription0.instrument());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(4300, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.averageOptionVolumeAbove((-2829));
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateAbove();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string1 = scannerSubscription0.scannerSettingPairs();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double1 = scannerSubscription0.couponRateBelow();
      assertEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      String string2 = scannerSubscription0.locationCode();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals((-2829), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.aboveVolume((-1210));
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.moodyRatingAbove();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.marketCapBelow(573.105992);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow((String) null);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(1395);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter((String) null);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode((String) null);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(3691.751869735593);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice((double) 1395);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1395.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1395.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      scannerSubscription0.belowPrice(3691.751869735593);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.locationCode();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string2 = scannerSubscription0.scannerSettingPairs();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      int int1 = scannerSubscription0.aboveVolume();
      assertFalse(int1 == int0);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1210), int1);
      
      scannerSubscription0.excludeConvertible("OxFauL!y\"{ #q,B7$,b");
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals("OxFauL!y\"{ #q,B7$,b", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string3 = scannerSubscription0.stockTypeFilter();
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1395, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals("OxFauL!y\"{ #q,B7$,b", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(3691.751869735593, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(573.105992, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1210), scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(3691.751869735593, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scannerSettingPairs("com.ib.client.ScannerSubscription");
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.abovePrice(1.0);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("");
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.numberOfRows(859);
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.scanCode();
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.maturityDateAbove();
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.scanCode("r)DWfx");
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("r)DWfx", scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.scanCode();
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.0, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("r)DWfx", scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(859, scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("r)DWfx", string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.moodyRatingBelow(" '<h6?eV-!34_d6sr,");
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(" '<h6?eV-!34_d6sr,", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(0);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(" '<h6?eV-!34_d6sr,", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(" '<h6?eV-!34_d6sr,", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.couponRateAbove();
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(" '<h6?eV-!34_d6sr,", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = scannerSubscription0.marketCapAbove();
      assertNotEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(" '<h6?eV-!34_d6sr,", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.maturityDateAbove("#yVS");
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("#yVS", scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("#yVS");
      assertNull(scannerSubscription0.locationCode());
      assertEquals("#yVS", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("#yVS", scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("c&`RgaMN");
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("c&`RgaMN", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("#yVS", scannerSubscription0.maturityDateAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("c&`RgaMN");
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("c&`RgaMN", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("c&`RgaMN", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateAbove();
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("c&`RgaMN", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("c&`RgaMN", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("c&`RgaMN", string0);
      
      String string1 = scannerSubscription0.stockTypeFilter();
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals("c&`RgaMN", scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("c&`RgaMN", scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.aboveVolume(0);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("+");
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("+", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.aboveVolume();
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(0, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals("+", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.abovePrice((-1369.196902958243));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("QHM");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("", string0);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("QHM");
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(0.0);
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.averageOptionVolumeAbove((-583));
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.moodyRatingAbove();
      assertFalse(string1.equals((Object)string0));
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string1);
      assertEquals("QHM", string1);
      
      scannerSubscription0.marketCapBelow(2382.201139828898);
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(2382.201139828898, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.stockTypeFilter();
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(2382.201139828898, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string2);
      assertEquals("", string2);
      
      scannerSubscription0.locationCode("QHM");
      assertEquals("QHM", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertEquals((-583), scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(2382.201139828898, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1369.196902958243), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals("QHM", scannerSubscription0.spRatingBelow());
      assertEquals("QHM", scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.abovePrice(3493.558773542555);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(3493.558773542555);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(3493.558773542555, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("'x");
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("'x", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(3493.558773542555, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("R9 ");
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("R9 ", scannerSubscription0.moodyRatingBelow());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(3493.558773542555, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.moodyRatingBelow();
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("R9 ", scannerSubscription0.moodyRatingBelow());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(3493.558773542555, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("R9 ", string0);
      
      String string1 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("R9 ", scannerSubscription0.moodyRatingBelow());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(3493.558773542555, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.couponRateAbove(0.0);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(0.0, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals("R9 ", scannerSubscription0.moodyRatingBelow());
      assertEquals(3493.558773542555, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(1.7976931348623157E308);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1), int0);
      
      scannerSubscription0.abovePrice((double) (-1));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("cfB:Lbdp+><6Een");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.spRatingBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("cfB:Lbdp+><6Een", string0);
      
      scannerSubscription0.numberOfRows((-1));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.maturityDateBelow();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.marketCapBelow(1.7976931348623157E308);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice((-1.0));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.couponRateAbove();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      String string2 = scannerSubscription0.spRatingAbove();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      int int1 = scannerSubscription0.aboveVolume();
      assertFalse(int1 == int0);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int1);
      
      scannerSubscription0.instrument((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove((double) Integer.MAX_VALUE);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(2.147483647E9, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(1605.337630405127);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals("cfB:Lbdp+><6Een", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1605.337630405127, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.scanCode());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(2.147483647E9, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.aboveVolume((-1));
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.stockTypeFilter((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(1636.385804739);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateBelow((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow((String) null);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice((-317.9566304));
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.scannerSettingPairs();
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      double double0 = scannerSubscription0.abovePrice();
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      scannerSubscription0.couponRateAbove((-317.9566304));
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-317.9566304), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("-mqX");
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-317.9566304), scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateAbove(1.7976931348623157E308);
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.marketCapBelow();
      assertEquals(double1, double0, 0.01);
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      String string1 = scannerSubscription0.locationCode();
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      double double2 = scannerSubscription0.belowPrice();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-317.9566304), double2, 0.01);
      
      scannerSubscription0.moodyRatingAbove("=1)");
      assertEquals((-317.9566304), scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.stockTypeFilter());
      assertEquals("-mqX", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1636.385804739, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("=1)", scannerSubscription0.moodyRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.moodyRatingBelow("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("zU{cbT?l$o");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      String string1 = scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.excludeConvertible((String) null);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove("");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string2 = scannerSubscription0.excludeConvertible();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string2);
      
      scannerSubscription0.scannerSettingPairs("zU{cbT?l$o");
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("zU{cbT?l$o", scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("zU{cbT?l$o", scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.scanCode("mcW{*F(bq");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("mcW{*F(bq", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.scanCode("com.ib.client.ScannerSubscription");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.belowPrice(0.0);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("9ajb$t3nv?a///5@o");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingBelow("9ajb$t3nv?a///5@o");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("com.ib.client.ScannerSubscription");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingBelow("");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      int int1 = scannerSubscription0.aboveVolume();
      assertTrue(int1 == int0);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int1);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double1 = scannerSubscription0.marketCapBelow();
      assertEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      scannerSubscription0.spRatingAbove("");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.moodyRatingAbove("mcW{*F(bq");
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.excludeConvertible());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("mcW{*F(bq", scannerSubscription0.moodyRatingAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(0.0, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.scanCode());
      assertEquals("com.ib.client.ScannerSubscription", scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("", scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals("9ajb$t3nv?a///5@o", scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.locationCode("`:hdF*");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume((-1));
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.abovePrice((-1.0));
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.stockTypeFilter("`:hdF*");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.spRatingAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string0);
      
      scannerSubscription0.maturityDateBelow("w=kMVFSaLqP!M\"6Mu6B");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals("`:hdF*", scannerSubscription0.locationCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode(">L8/1^zS4of");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.spRatingAbove((String) null);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(0.0);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.scannerSettingPairs();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      int int0 = scannerSubscription0.numberOfRows();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals((-1), int0);
      
      double double0 = scannerSubscription0.marketCapAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals((-1), scannerSubscription0.aboveVolume());
      assertEquals("`:hdF*", scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals((-1.0), scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.scanCode());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.instrument());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals(">L8/1^zS4of", scannerSubscription0.locationCode());
      assertEquals("w=kMVFSaLqP!M\"6Mu6B", scannerSubscription0.maturityDateBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.excludeConvertible("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertNull(scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.excludeConvertible();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("", string0);
      
      scannerSubscription0.moodyRatingAbove("L~Rn&QN");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.excludeConvertible("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.belowPrice();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      
      double double1 = scannerSubscription0.belowPrice();
      assertEquals(double1, double0, 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      
      scannerSubscription0.spRatingBelow("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.aboveVolume(1);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(0.0);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals("L~Rn&QN", scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(Integer.MAX_VALUE, int0);
      
      scannerSubscription0.moodyRatingAbove("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.instrument("");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string1 = scannerSubscription0.scanCode();
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals("", scannerSubscription0.spRatingBelow());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNull(string1);
      
      scannerSubscription0.spRatingBelow("L~Rn&QN");
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals("L~Rn&QN", scannerSubscription0.spRatingBelow());
      assertEquals("", scannerSubscription0.instrument());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.moodyRatingAbove());
      assertEquals(0.0, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertEquals("", scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.locationCode());
      assertEquals(1, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(scannerSubscription0);
      
      scannerSubscription0.aboveVolume(357);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(205.896448);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(205.896448, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow((-3836.256796285827));
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertNull(scannerSubscription0.maturityDateAbove());
      assertEquals(205.896448, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-3836.256796285827), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.maturityDateAbove("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(205.896448, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-3836.256796285827), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(1376.0368855032);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1376.0368855032, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertEquals((-3836.256796285827), scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.couponRateBelow(1.0);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1376.0368855032, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertNull(scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.locationCode("");
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1376.0368855032, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapBelow(1318.34);
      assertEquals(1318.34, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      String string0 = scannerSubscription0.maturityDateAbove();
      assertEquals(1318.34, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.0, scannerSubscription0.couponRateBelow(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertNotNull(string0);
      assertEquals("", string0);
      
      scannerSubscription0.couponRateBelow(1318.34);
      assertEquals(1318.34, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1318.34, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      scannerSubscription0.marketCapAbove(1318.34);
      assertEquals(1318.34, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1318.34, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1318.34, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals(1318.34, scannerSubscription0.marketCapBelow(), 0.01);
      assertNull(scannerSubscription0.moodyRatingBelow());
      assertEquals(1318.34, scannerSubscription0.marketCapAbove(), 0.01);
      assertNull(scannerSubscription0.excludeConvertible());
      assertEquals("", scannerSubscription0.maturityDateAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertNull(scannerSubscription0.spRatingAbove());
      assertNull(scannerSubscription0.scannerSettingPairs());
      assertNull(scannerSubscription0.scanCode());
      assertNull(scannerSubscription0.maturityDateBelow());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1318.34, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals("", scannerSubscription0.locationCode());
      assertEquals(357, scannerSubscription0.aboveVolume());
      assertNull(scannerSubscription0.moodyRatingAbove());
      assertNull(scannerSubscription0.spRatingBelow());
      assertNull(scannerSubscription0.stockTypeFilter());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertNull(scannerSubscription0.instrument());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), ScannerSubscription.NO_ROW_NUMBER_SPECIFIED);
      assertEquals(1318.34, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow(":_Y+\"07S\u0005iqPs~*");
      scannerSubscription0.moodyRatingBelow("com.ib.client.ScannerSubscription");
      scannerSubscription0.scannerSettingPairs("");
      scannerSubscription0.averageOptionVolumeAbove((-1));
      scannerSubscription0.maturityDateBelow("");
      scannerSubscription0.aboveVolume(Integer.MAX_VALUE);
      scannerSubscription0.numberOfRows();
      scannerSubscription0.excludeConvertible("");
      scannerSubscription0.belowPrice();
      scannerSubscription0.averageOptionVolumeAbove();
      scannerSubscription0.moodyRatingAbove();
      scannerSubscription0.marketCapBelow((double) Integer.MAX_VALUE);
      scannerSubscription0.locationCode();
      scannerSubscription0.maturityDateAbove("");
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals(2.147483647E9, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.couponRateBelow(1162.3344390159);
      scannerSubscription0.scannerSettingPairs("6FSa|7iT3$4o'=");
      scannerSubscription0.marketCapBelow(0.0);
      scannerSubscription0.stockTypeFilter("");
      scannerSubscription0.averageOptionVolumeAbove(0);
      scannerSubscription0.abovePrice();
      scannerSubscription0.moodyRatingBelow("");
      scannerSubscription0.locationCode("H*2/2m&D;");
      scannerSubscription0.excludeConvertible("6FSa|7iT3$4o'=");
      scannerSubscription0.marketCapAbove(1162.3344390159);
      scannerSubscription0.excludeConvertible("com.ib.client.ScannerSubscription");
      scannerSubscription0.numberOfRows((-1965));
      scannerSubscription0.maturityDateAbove("H*2/2m&D;");
      scannerSubscription0.abovePrice();
      scannerSubscription0.numberOfRows(1);
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals(1162.3344390159, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.averageOptionVolumeAbove(0);
      scannerSubscription0.averageOptionVolumeAbove(0);
      scannerSubscription0.marketCapBelow((-144.5341586));
      scannerSubscription0.couponRateAbove(1.7976931348623157E308);
      scannerSubscription0.moodyRatingAbove("");
      scannerSubscription0.moodyRatingAbove("Sv$:b 70");
      scannerSubscription0.stockTypeFilter("");
      scannerSubscription0.scanCode();
      scannerSubscription0.scanCode();
      assertEquals((-144.5341586), scannerSubscription0.marketCapBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove("6ZqT09!yDl`");
      scannerSubscription0.moodyRatingAbove("6ZqT09!yDl`");
      scannerSubscription0.aboveVolume((-1394));
      scannerSubscription0.maturityDateBelow("6ZqT09!yDl`");
      scannerSubscription0.instrument("6ZqT09!yDl`");
      scannerSubscription0.locationCode();
      scannerSubscription0.moodyRatingAbove();
      scannerSubscription0.averageOptionVolumeAbove();
      scannerSubscription0.abovePrice((-1508.963736945117));
      scannerSubscription0.scannerSettingPairs();
      scannerSubscription0.instrument((String) null);
      scannerSubscription0.couponRateBelow((-2702.6403806283));
      scannerSubscription0.spRatingAbove("6ZqT09!yDl`");
      scannerSubscription0.spRatingBelow();
      scannerSubscription0.couponRateBelow((-1508.963736945117));
      scannerSubscription0.couponRateBelow();
      scannerSubscription0.moodyRatingBelow();
      scannerSubscription0.abovePrice((double) Integer.MAX_VALUE);
      scannerSubscription0.abovePrice((-1508.963736945117));
      scannerSubscription0.stockTypeFilter();
      scannerSubscription0.excludeConvertible(",*\"@wL[-WthZ\"eb!Dw");
      scannerSubscription0.maturityDateBelow();
      scannerSubscription0.abovePrice();
      scannerSubscription0.maturityDateBelow();
      scannerSubscription0.spRatingAbove((String) null);
      scannerSubscription0.abovePrice(0.0);
      assertEquals((-1394), scannerSubscription0.aboveVolume());
  }
}
