/*
 * This file was automatically generated by EvoSuite
 * Sun May 05 03:10:02 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ib.client.TickType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TickType_ESTest extends TickType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TickType.getField((-1131));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(7, TickType.LOW);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(9, TickType.CLOSE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(1, TickType.BID);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(4, TickType.LAST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(2, TickType.ASK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(8, TickType.VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField(47);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fundamentals", string1);
      
      String string2 = TickType.getField(40);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("lastEFP", string2);
      
      String string3 = TickType.getField(2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("askPrice", string3);
      
      String string4 = TickType.getField(10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("bidOptComp", string4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TickType.getField((-2569));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = TickType.getField((-2569));
      assertNotNull(string1);
      assertEquals("unknown", string1);
      
      TickType tickType0 = new TickType();
      assertEquals(7, TickType.LOW);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(9, TickType.CLOSE);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(49, TickType.HALTED);
      assertEquals(1, TickType.BID);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(8, TickType.VOLUME);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(4, TickType.LAST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(6, TickType.HIGH);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(2, TickType.ASK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(5, TickType.LAST_SIZE);
      assertNotNull(tickType0);
      
      String string2 = TickType.getField(14);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("open", string2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(14, TickType.OPEN);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(4, TickType.LAST);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(1, TickType.BID);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(2, TickType.ASK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(7, TickType.LOW);
      assertEquals(11, TickType.ASK_OPTION);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      String string1 = TickType.getField(28);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OptionPutOpenInterest", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(6, TickType.HIGH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(1, TickType.BID);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(14, TickType.OPEN);
      assertEquals(2, TickType.ASK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(49, TickType.HALTED);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(4, TickType.LAST);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(9, TickType.CLOSE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(7);
      assertNotNull(string0);
      assertEquals("low", string0);
      
      String string1 = TickType.getField(13);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("modelOptComp", string1);
      
      String string2 = TickType.getField(17);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("26WeekLow", string2);
      
      String string3 = TickType.getField(5);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lastSize", string3);
      
      String string4 = TickType.getField(32);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("bidExch", string4);
      
      String string5 = TickType.getField(23);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("OptionHistoricalVolatility", string5);
      
      String string6 = TickType.getField(30);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("OptionPutVolume", string6);
      
      String string7 = TickType.getField(11);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("askOptComp", string7);
      
      String string8 = TickType.getField(7);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("low", string8);
      
      String string9 = TickType.getField(10);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertEquals("bidOptComp", string9);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(7, TickType.LOW);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(1, TickType.BID);
      assertEquals(49, TickType.HALTED);
      assertEquals(14, TickType.OPEN);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(4, TickType.LAST);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField(26);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OptionAskExchStr", string1);
      
      String string2 = TickType.getField((-2806));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("unknown", string2);
      
      String string3 = TickType.getField(211);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("unknown", string3);
      
      String string4 = TickType.getField(26);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("OptionAskExchStr", string4);
      
      String string5 = TickType.getField(24);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("OptionImpliedVolatility", string5);
      
      String string6 = TickType.getField(42);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("highEFP", string6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = TickType.getField(2322);
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(2, TickType.ASK);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(7, TickType.LOW);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(49, TickType.HALTED);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(6, TickType.HIGH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField(34);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("auctionVolume", string1);
      
      String string2 = TickType.getField(33);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("askExch", string2);
      
      String string3 = TickType.getField(6);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("high", string3);
      
      String string4 = TickType.getField((-2255));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("unknown", string4);
      
      String string5 = TickType.getField(45);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("lastTimestamp", string5);
      
      String string6 = TickType.getField((-3270));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("unknown", string6);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(8, TickType.VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(14, TickType.OPEN);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(9, TickType.CLOSE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(2, TickType.ASK);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(1, TickType.BID);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(24);
      assertNotNull(string0);
      assertEquals("OptionImpliedVolatility", string0);
      
      String string1 = TickType.getField(19);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("52WeekLow", string1);
      
      String string2 = TickType.getField(37);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("markPrice", string2);
      
      String string3 = TickType.getField((-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("unknown", string3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(9, TickType.CLOSE);
      assertEquals(49, TickType.HALTED);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(4, TickType.LAST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(1, TickType.BID);
      assertEquals(14, TickType.OPEN);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(17);
      assertNotNull(string0);
      assertEquals("26WeekLow", string0);
      
      String string1 = TickType.getField(10);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bidOptComp", string1);
      
      String string2 = TickType.getField(3774);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("unknown", string2);
      
      String string3 = TickType.getField(16);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("13WeekHigh", string3);
      
      String string4 = TickType.getField(17);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("26WeekLow", string4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TickType.getField(49);
      assertNotNull(string0);
      assertEquals("halted", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(49, TickType.HALTED);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(9, TickType.CLOSE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(4, TickType.LAST);
      assertEquals(14, TickType.OPEN);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(1, TickType.BID);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(8, TickType.VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(3792);
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = TickType.getField(31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("IndexFuturePremium", string1);
      
      String string2 = TickType.getField(21);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("AvgVolume", string2);
      
      String string3 = TickType.getField(48);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("RTVolume", string3);
      
      String string4 = TickType.getField((-3097));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("unknown", string4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(9, TickType.CLOSE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(4, TickType.LAST);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(2, TickType.ASK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(6, TickType.HIGH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(27);
      assertNotNull(string0);
      assertEquals("OptionCallOpenInterest", string0);
      
      String string1 = TickType.getField(2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("askPrice", string1);
      
      String string2 = TickType.getField(8);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("volume", string2);
      
      String string3 = TickType.getField(8);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("volume", string3);
      
      String string4 = TickType.getField(0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("bidSize", string4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(9, TickType.CLOSE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(4, TickType.LAST);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(18);
      assertNotNull(string0);
      assertEquals("26WeekHigh", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(6, TickType.HIGH);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(8, TickType.VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(14, TickType.OPEN);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(49, TickType.HALTED);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(9, TickType.CLOSE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(2, TickType.ASK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(7, TickType.LOW);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(1, TickType.BID);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(15);
      assertNotNull(string0);
      assertEquals("13WeekLow", string0);
      
      String string1 = TickType.getField(48);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RTVolume", string1);
      
      String string2 = TickType.getField(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("bidSize", string2);
      
      String string3 = TickType.getField(0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bidSize", string3);
      
      String string4 = TickType.getField(13);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("modelOptComp", string4);
      
      String string5 = TickType.getField(46);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("shortable", string5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(7, TickType.LOW);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(9, TickType.CLOSE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(1, TickType.BID);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(49, TickType.HALTED);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(4, TickType.LAST);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(6, TickType.HIGH);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(2, TickType.ASK);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(8, TickType.VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField((-1395));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = TickType.getField(223);
      assertNotNull(string1);
      assertEquals("unknown", string1);
      
      String string2 = TickType.getField(43);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("lowEFP", string2);
      
      String string3 = TickType.getField(38);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("bidEFP", string3);
      
      String string4 = TickType.getField(4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("lastPrice", string4);
      
      String string5 = TickType.getField(48);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("RTVolume", string5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TickType.getField((-508));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(2, TickType.ASK);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(1, TickType.BID);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(8, TickType.VOLUME);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(6, TickType.HIGH);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(4, TickType.LAST);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(14, TickType.OPEN);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField(15);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13WeekLow", string1);
      
      String string2 = TickType.getField(0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("bidSize", string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(4, TickType.LAST);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(2, TickType.ASK);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(14, TickType.OPEN);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(9);
      assertNotNull(string0);
      assertEquals("close", string0);
      
      String string1 = TickType.getField(2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("askPrice", string1);
      
      String string2 = TickType.getField(1174);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("unknown", string2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(6, TickType.HIGH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(1, TickType.BID);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(9, TickType.CLOSE);
      assertEquals(49, TickType.HALTED);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(7, TickType.LOW);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(2, TickType.ASK);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      String string1 = TickType.getField(10);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bidOptComp", string1);
      
      String string2 = TickType.getField((-1877));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("unknown", string2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(9, TickType.CLOSE);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(7, TickType.LOW);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(11, TickType.ASK_OPTION);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(25);
      assertNotNull(string0);
      assertEquals("OptionBidExchStr", string0);
      
      String string1 = TickType.getField(23);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OptionHistoricalVolatility", string1);
      
      String string2 = TickType.getField(46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("shortable", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(9, TickType.CLOSE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(14, TickType.OPEN);
      assertEquals(4, TickType.LAST);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(1, TickType.BID);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(2, TickType.ASK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(44);
      assertNotNull(string0);
      assertEquals("closeEFP", string0);
      
      String string1 = TickType.getField(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bidSize", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(8, TickType.VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(14, TickType.OPEN);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(7, TickType.LOW);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(6, TickType.HIGH);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(2, TickType.ASK);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(36);
      assertNotNull(string0);
      assertEquals("auctionImbalance", string0);
      
      String string1 = TickType.getField(40);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lastEFP", string1);
      
      String string2 = TickType.getField((-6414));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("unknown", string2);
      
      String string3 = TickType.getField((-6414));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("unknown", string3);
      
      String string4 = TickType.getField(41);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("openEFP", string4);
      
      String string5 = TickType.getField(39);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("askEFP", string5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(9, TickType.CLOSE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(7, TickType.LOW);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(1, TickType.BID);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(0, TickType.BID_SIZE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      String string1 = TickType.getField(8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volume", string1);
      
      String string2 = TickType.getField(48);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("RTVolume", string2);
      
      String string3 = TickType.getField(560);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("unknown", string3);
      
      String string4 = TickType.getField(9);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("close", string4);
      
      String string5 = TickType.getField(3);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("askSize", string5);
      
      String string6 = TickType.getField(35);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("auctionPrice", string6);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(49, TickType.HALTED);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(2, TickType.ASK);
      assertEquals(6, TickType.HIGH);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(4, TickType.LAST);
      assertEquals(14, TickType.OPEN);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(1, TickType.BID);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(8, TickType.VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField((-745));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = TickType.getField(30);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OptionPutVolume", string1);
      
      String string2 = TickType.getField((-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("unknown", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(6, TickType.HIGH);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(49, TickType.HALTED);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(7, TickType.LOW);
      assertEquals(2, TickType.ASK);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(1, TickType.BID);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(46, TickType.SHORTABLE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(43);
      assertNotNull(string0);
      assertEquals("lowEFP", string0);
      
      String string1 = TickType.getField(21);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AvgVolume", string1);
      
      String string2 = TickType.getField(45);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("lastTimestamp", string2);
      
      String string3 = TickType.getField(20);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("52WeekHigh", string3);
      
      String string4 = TickType.getField(26);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("OptionAskExchStr", string4);
      
      String string5 = TickType.getField(12);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("lastOptComp", string5);
      
      String string6 = TickType.getField(1697);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("unknown", string6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(1, TickType.BID);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(14, TickType.OPEN);
      assertEquals(4, TickType.LAST);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(9, TickType.CLOSE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(7);
      assertNotNull(string0);
      assertEquals("low", string0);
      
      String string1 = TickType.getField(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bidSize", string1);
      
      String string2 = TickType.getField(24);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OptionImpliedVolatility", string2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(6, TickType.HIGH);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(2, TickType.ASK);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(7, TickType.LOW);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(14, TickType.OPEN);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(1, TickType.BID);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(4, TickType.LAST);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(8, TickType.VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(49, TickType.HALTED);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField(29);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OptionCallVolume", string1);
      
      String string2 = TickType.getField(6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("high", string2);
      
      String string3 = TickType.getField(4);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("lastPrice", string3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TickType tickType0 = new TickType();
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(6, TickType.HIGH);
      assertEquals(2, TickType.ASK);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(14, TickType.OPEN);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(4, TickType.LAST);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(1, TickType.BID);
      assertEquals(9, TickType.CLOSE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(37, TickType.MARK_PRICE);
      assertNotNull(tickType0);
      
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      String string1 = TickType.getField(8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("volume", string1);
      
      String string2 = TickType.getField(22);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("OpenInterest", string2);
      
      String string3 = TickType.getField(5);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lastSize", string3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TickType.getField(1);
      assertNotNull(string0);
      assertEquals("bidPrice", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(9, TickType.CLOSE);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(2, TickType.ASK);
      assertEquals(49, TickType.HALTED);
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(7, TickType.LOW);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(1, TickType.BID);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(6, TickType.HIGH);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(8, TickType.VOLUME);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(14, TickType.OPEN);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(21, TickType.AVG_VOLUME);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(4, TickType.LAST);
      assertNotNull(tickType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = TickType.getField((-1333));
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = TickType.getField((-16));
      assertNotNull(string1);
      assertEquals("unknown", string1);
      
      String string2 = TickType.getField(646);
      assertNotNull(string2);
      assertEquals("unknown", string2);
      
      String string3 = TickType.getField(7);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("low", string3);
      
      String string4 = TickType.getField(646);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("unknown", string4);
      
      String string5 = TickType.getField(646);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertEquals("unknown", string5);
      
      String string6 = TickType.getField(28);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("OptionPutOpenInterest", string6);
      
      String string7 = TickType.getField(682);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("unknown", string7);
      
      String string8 = TickType.getField((-1333));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("unknown", string8);
      
      String string9 = TickType.getField((-16));
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("unknown", string9);
      
      String string10 = TickType.getField(16);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertEquals("13WeekHigh", string10);
      
      String string11 = TickType.getField(1673);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertEquals("unknown", string11);
      
      String string12 = TickType.getField((-16));
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertEquals("unknown", string12);
      
      String string13 = TickType.getField(1673);
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string3));
      assertEquals("unknown", string13);
      
      String string14 = TickType.getField(0);
      assertNotNull(string14);
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string4));
      assertEquals("bidSize", string14);
      
      String string15 = TickType.getField(1);
      assertNotNull(string15);
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string4));
      assertEquals("bidPrice", string15);
      
      String string16 = TickType.getField(29);
      assertNotNull(string16);
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string10));
      assertEquals("OptionCallVolume", string16);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TickType.getField(0);
      assertNotNull(string0);
      assertEquals("bidSize", string0);
      
      TickType tickType0 = new TickType();
      assertEquals(44, TickType.CLOSE_EFP_COMPUTATION);
      assertEquals(36, TickType.AUCTION_IMBALANCE);
      assertEquals(22, TickType.OPEN_INTEREST);
      assertEquals(26, TickType.OPTION_ASK_EXCH);
      assertEquals(28, TickType.OPTION_PUT_OPEN_INTEREST);
      assertEquals(0, TickType.BID_SIZE);
      assertEquals(30, TickType.OPTION_PUT_VOLUME);
      assertEquals(34, TickType.AUCTION_VOLUME);
      assertEquals(9, TickType.CLOSE);
      assertEquals(29, TickType.OPTION_CALL_VOLUME);
      assertEquals(49, TickType.HALTED);
      assertEquals(25, TickType.OPTION_BID_EXCH);
      assertEquals(2, TickType.ASK);
      assertEquals(42, TickType.HIGH_EFP_COMPUTATION);
      assertEquals(7, TickType.LOW);
      assertEquals(38, TickType.BID_EFP_COMPUTATION);
      assertEquals(18, TickType.HIGH_26_WEEK);
      assertEquals(46, TickType.SHORTABLE);
      assertEquals(48, TickType.RT_VOLUME);
      assertEquals(45, TickType.LAST_TIMESTAMP);
      assertEquals(10, TickType.BID_OPTION);
      assertEquals(37, TickType.MARK_PRICE);
      assertEquals(1, TickType.BID);
      assertEquals(27, TickType.OPTION_CALL_OPEN_INTEREST);
      assertEquals(19, TickType.LOW_52_WEEK);
      assertEquals(35, TickType.AUCTION_PRICE);
      assertEquals(32, TickType.BID_EXCH);
      assertEquals(23, TickType.OPTION_HISTORICAL_VOL);
      assertEquals(40, TickType.LAST_EFP_COMPUTATION);
      assertEquals(24, TickType.OPTION_IMPLIED_VOL);
      assertEquals(20, TickType.HIGH_52_WEEK);
      assertEquals(8, TickType.VOLUME);
      assertEquals(43, TickType.LOW_EFP_COMPUTATION);
      assertEquals(5, TickType.LAST_SIZE);
      assertEquals(16, TickType.HIGH_13_WEEK);
      assertEquals(6, TickType.HIGH);
      assertEquals(11, TickType.ASK_OPTION);
      assertEquals(3, TickType.ASK_SIZE);
      assertEquals(41, TickType.OPEN_EFP_COMPUTATION);
      assertEquals(17, TickType.LOW_26_WEEK);
      assertEquals(13, TickType.MODEL_OPTION);
      assertEquals(12, TickType.LAST_OPTION);
      assertEquals(39, TickType.ASK_EFP_COMPUTATION);
      assertEquals(47, TickType.FUNDAMENTAL_RATIOS);
      assertEquals(33, TickType.ASK_EXCH);
      assertEquals(14, TickType.OPEN);
      assertEquals(4, TickType.LAST);
      assertEquals(31, TickType.INDEX_FUTURE_PREMIUM);
      assertEquals(15, TickType.LOW_13_WEEK);
      assertEquals(21, TickType.AVG_VOLUME);
      assertNotNull(tickType0);
      
      String string1 = TickType.getField((-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("unknown", string1);
      
      String string2 = TickType.getField(24);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("OptionImpliedVolatility", string2);
      
      String string3 = TickType.getField(0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bidSize", string3);
      
      String string4 = TickType.getField((-1454));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("unknown", string4);
      
      String string5 = TickType.getField(25);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("OptionBidExchStr", string5);
      
      String string6 = TickType.getField(20);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("52WeekHigh", string6);
      
      String string7 = TickType.getField(14);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("open", string7);
      
      String string8 = TickType.getField(0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("bidSize", string8);
      
      String string9 = TickType.getField(43);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertEquals("lowEFP", string9);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TickType tickType0 = new TickType();
      String string0 = TickType.getField(11);
      assertEquals("askOptComp", string0);
      
      TickType.getField(41);
      TickType.getField(993);
      String string1 = TickType.getField(27);
      assertEquals("OptionCallOpenInterest", string1);
      
      String string2 = TickType.getField(15);
      assertEquals("13WeekLow", string2);
      
      String string3 = TickType.getField(13);
      assertEquals("modelOptComp", string3);
      
      TickType.getField(48);
      TickType.getField(45);
      TickType.getField(39);
      TickType.getField(21);
      TickType.getField(35);
      TickType.getField(43);
      TickType.getField(0);
      TickType.getField(33);
      String string4 = TickType.getField(0);
      assertEquals("bidSize", string4);
      
      String string5 = TickType.getField(7);
      assertEquals("low", string5);
      
      String string6 = TickType.getField(21);
      assertEquals("AvgVolume", string6);
      
      String string7 = TickType.getField(8);
      assertEquals("volume", string7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TickType tickType0 = new TickType();
      TickType.getField(17);
      String string0 = TickType.getField(11);
      assertEquals("askOptComp", string0);
      
      TickType.getField(12);
      String string1 = TickType.getField(2);
      assertEquals("askPrice", string1);
      
      TickType.getField((-3961));
      String string2 = TickType.getField(12);
      assertEquals("lastOptComp", string2);
      
      String string3 = TickType.getField(17);
      assertEquals("26WeekLow", string3);
      
      TickType.getField(47);
      TickType.getField(47);
      TickType.getField(18);
      String string4 = TickType.getField(18);
      assertEquals("26WeekHigh", string4);
      
      String string5 = TickType.getField(14);
      assertEquals("open", string5);
      
      TickType.getField((-1118));
      TickType.getField(37);
      String string6 = TickType.getField(31);
      assertEquals("IndexFuturePremium", string6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TickType.getField(0);
      TickType.getField(1068);
      TickType.getField(1068);
      TickType tickType0 = new TickType();
      String string0 = TickType.getField(8);
      assertEquals("volume", string0);
      
      String string1 = TickType.getField(11);
      assertEquals("askOptComp", string1);
      
      String string2 = TickType.getField(24);
      assertEquals("OptionImpliedVolatility", string2);
      
      TickType.getField(42);
      String string3 = TickType.getField(19);
      assertEquals("52WeekLow", string3);
      
      String string4 = TickType.getField(17);
      assertEquals("26WeekLow", string4);
      
      String string5 = TickType.getField(9);
      assertEquals("close", string5);
      
      String string6 = TickType.getField(23);
      assertEquals("OptionHistoricalVolatility", string6);
      
      String string7 = TickType.getField(1);
      assertEquals("bidPrice", string7);
      
      TickType.getField(50);
      String string8 = TickType.getField(0);
      assertEquals("bidSize", string8);
      
      TickType.getField(34);
      TickType.getField(31);
      String string9 = TickType.getField(14);
      assertEquals("open", string9);
      
      TickType.getField(32);
      String string10 = TickType.getField((-1978));
      assertEquals("unknown", string10);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TickType tickType0 = new TickType();
      TickType.getField(38);
      TickType.getField(36);
      String string0 = TickType.getField(5);
      assertEquals("lastSize", string0);
      
      TickType.getField(13);
      String string1 = TickType.getField(4);
      assertEquals("lastPrice", string1);
      
      TickType.getField(37);
      String string2 = TickType.getField(6);
      assertEquals("high", string2);
      
      String string3 = TickType.getField(18);
      assertEquals("26WeekHigh", string3);
      
      String string4 = TickType.getField(26);
      assertEquals("OptionAskExchStr", string4);
      
      TickType.getField(44);
      TickType.getField(40);
      TickType.getField(44);
      String string5 = TickType.getField(13);
      assertEquals("modelOptComp", string5);
      
      TickType.getField((-1462));
      TickType.getField(41);
      String string6 = TickType.getField(10);
      assertEquals("bidOptComp", string6);
      
      String string7 = TickType.getField(11);
      assertEquals("askOptComp", string7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TickType tickType0 = new TickType();
      TickType.getField(34);
      String string0 = TickType.getField(11);
      assertEquals("askOptComp", string0);
      
      TickType.getField(0);
      TickType.getField(31);
      TickType.getField(37);
      String string1 = TickType.getField(1);
      assertEquals("bidPrice", string1);
      
      TickType.getField(0);
      TickType.getField(0);
      String string2 = TickType.getField(0);
      assertEquals("bidSize", string2);
      
      TickType.getField(30);
      String string3 = TickType.getField(9);
      assertEquals("close", string3);
      
      TickType.getField(35);
      TickType.getField((-554));
      TickType.getField(30);
      String string4 = TickType.getField(22);
      assertEquals("OpenInterest", string4);
      
      String string5 = TickType.getField(3);
      assertEquals("askSize", string5);
      
      String string6 = TickType.getField(46);
      assertEquals("shortable", string6);
  }
}
