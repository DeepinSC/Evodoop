/*
 * This file was automatically generated by EvoSuite
 */

package com.hf.sfm.crypt;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.hf.sfm.crypt.Base64;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Base64EvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64.altBase64ToByteArray("GN*");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * String length must be a multiple of four.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = Base64.base64ToByteArray("398=");
      assertNotNull(byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.byteArrayToBase64(byteArray0);
      assertEquals("AA==", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = Base64.base64ToByteArray("");
      assertNotNull(byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        Base64.altBase64ToByteArray("Bk2:On[jIl|Wk6E");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal character B
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = Base64.altBase64ToByteArray("?g==");
      assertNotNull(byteArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Base64.byteArrayToAltBase64(byteArray0);
      assertEquals("!!!!", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Base64.byteArrayToBase64(byteArray0);
      assertEquals("AAA=", string0);
      assertNotNull(string0);
  }
}
